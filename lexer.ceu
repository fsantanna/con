data :Tk = [pos :Pos,str] {
    :Sym = []
    :Tag = []
    :Num = []
}

export [iter-lexer] {
    func iter-skip (^f-itr :Iterator, ^buf :Buf) {
        coro () {
            loop {
                val c = f-read-c(^^f-itr, ^^buf)
            } while c {
                ifs c {
                    in? [' ','\t','\n'] {}
                    == ';' {
                        val c' = f-read-c(^^f-itr, ^^buf)
                        if c' /= ';' {
                            f-unread-c(^^buf)
                        } else {
                            f-read-until-c(^^f-itr, ^^buf, '\n')
                        }
                    }
                    else -> yield(c)
                }
            }
        } thus {
            iter(it)
        }
    }

    do {
        println(:ITER-SKIP)
        val f-itr = iter-file("x.ceu")
        val buf   = buf-init()
        val s-itr :Iterator = iter-skip(f-itr, buf)
        s-itr.f(s-itr) thus {
            assert(it == '1')
        }
        s-itr.f(s-itr) thus {
            assert(it == '2')
        }
        s-itr.f(s-itr) thus {
            assert(it == '3')
        }
    }

    func iter-lexer (^skip :Iterator, ^file :Iterator, ^buf :Buf) {
        coro () {
            val SS :Iterator = ^^skip
            val FF :Iterator = ^^file
            val BB :Buf      = ^^buf
            loop {
                val c = SS.f(SS)
                val pos = copy(BB.cur.pos)
            } while c {
                ifs c {
                    in? ['@','#','(',')','[',']',',','-'] {
                        yield(:Tk.Sym [move(pos), to-string(c)])
                    }
                    == ':' {               ;; TAG
                        f-read-while-f(FF, BB, \{
                            letter-or-digit?(it)
                        }) thus tag {
                            yield(:Tk.Tag [move(pos), to-string(c) ++ tag])
                        }
                    }
                    digit?(c) {              ;; NUM
                        f-unread-c(BB)
                        f-read-while-f(FF, BB, \{
                            (it == '.') or letter-or-digit?(it)
                        }) thus num {
                            yield(:Tk.Num [move(pos),move(num)])
                        }
                    }
                    else -> throw("invalid token")
                }
            }
        } thus {
            iter(it)
        }
    }

    do {
        println(:ITER-LEXER)
        val file  = iter-file("x.ceu")
        val buf   = buf-init()
        val skip  :Iterator = iter-skip(file, buf)
        val lexer :Iterator = iter-lexer(skip, file, buf)
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[1,1],"1"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[1,3],"2"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[2,1],"3"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Tag [[3,5],":x"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,1],"@"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,2],"["])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,3],"("])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[4,4],"10"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,6],","])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[4,7],"20"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,9],")"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,10],"]"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,12],"#"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,13],"["])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,14],"-"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[4,15],"1"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[4,16],","])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Num [[4,17],":x"])
        }
        lexer.f(lexer) thus {
            assert(it === :Tk.Sym [[4,19],"]"])
        }
    }
}
