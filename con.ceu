func to-iter-file (f-name) {
    val f-ptr  = to.pointer(f-name)
    val f-hand = `:pointer fopen((char*)$f-ptr.Pointer, "r")`
    to.iter <-- coro () {
        val f = f-hand
        defer {
            `fclose($f.Pointer);`
        }
        loop {
            val b = `:number fgetc($f.Pointer)`
            until (b == `:number EOF`)
            yield(to.char(b))
        }
    }
}

test {
    println(:ITER-FILE)
    val itr :Iterator = to-iter-file("x.ceu")
    assert(itr->next() == '1')
    assert(itr->next() == ' ')
    assert(itr->next() == '2')
    assert(itr->next() == ' ')
    assert(itr->next() == ';')
    assert(itr->next() == ';')
    assert(itr->next() == ' ')
    assert(itr->next() == '9')
    assert(itr->next() == '\n')
    ;;assert(false)
}

^["fp.ceu"]
^["char.ceu"]
^["buffer.ceu"]
^["lexer.ceu"]
^["tokens.ceu"]

;;-----------------------------------------------------------------------------

var con-parse

func con-list (tks :Tokens, f) {
    val f' = f or con-parse
    var vec = #[]
    loop {
        until tks->check-read("]")
        set vec[+] = [f'(tks)]
        until tks->check-read("]")
        while tks->error-read(",")
    }
    to.tuple(vec) thus {
        loop [i,[v]] in to.iter(it,[:idx,:val]) {
            set it[i] = v
        }
        it
    }
}

set con-parse = func (tks :Tokens) {
    ifs {
        tks->check-read("nil")   => nil
        tks->check-read("false") => false
        tks->check-read("true")  => true
        tks->check-read("-") and tks->error-read(:Tk.Num) { \it :Tk =>
            -(it.str->to.number)
        }
        tks->check-read(:Tk.Num) { \tk1 :Tk => tk1.str->to.number }
        tks->check-read(:Tk.Tag) { \tk2 :Tk =>
            val tg = tk2.str->to.tag
            if not tks->check("[") {
                tg
            } else {
                val tup = tks->con-parse()
                tag(tg, tup)
            }
        }
        tks->check-read(:Tk.Chr) { \tk3 :Tk => tk3.str->fp.drop-first->fp.drop-last->to.char }
        tks->check-read("[")
            => con-list(tks)
        tks->check-read("#") and tks->error-read("[")
            => to.vector(con-list(tks))
        tks->check-read("@") and tks->error-read("[") {
            con-list(tks) <- {
                if tks->check-read("(") {
                    val k = tks->con-parse()
                    tks->error-read(",")
                    val v = tks->con-parse()
                    tks->error-read(")")
                    [k,v]
                } else {
                    val k :Tk = tks->error-read(:Tk.Id)
                    tks->error-read("=")
                    val v = tks->con-parse()
                    [to.tag(":"++k.str) or :nil, v]
                }
            } --> to.dict
        }
        else => error(:TODO)
    }
}

func con-read (filename) {
    val f = to-iter-file(filename)
    val tks = tks-init(f)
    con-parse(tks)
}

test {
    println(:CON)
    do {
        val tks = tks-init(to.iter("1"))
        val con = con-parse(tks)
        assert(con == 1)
    }
    do {
        val tks = tks-init(to.iter("-1"))
        val con = con-parse(tks)
        assert(con == -1)
    }
    do {
        val tks = tks-init(to.iter(":x"))
        val con = con-parse(tks)
        assert(con == :x)
        assert(to.string(con) === ":x")
    }
    do {
        val tks = tks-init(to.iter(":asdf"))
        val con = con-parse(tks)
        assert(con == nil)
    }
    do {
        val tks = tks-init(to.iter("[]"))
        val con = con-parse(tks)
        assert(con === [])
    }
    do {
        val tks = tks-init(to.iter("[1,2]"))
        val con = con-parse(tks)
        assert(con === [1,2])
    }
    do {
        val tks = tks-init(to.iter("[1,[9],2]"))
        val con = con-parse(tks)
        assert(con === [1,[9],2])
    }
    do {
        val tks = tks-init(to.iter("#[[1]]"))
        val con = con-parse(tks)
        assert(con === #[[1]])
    }
    do {
        val tks = tks-init(to.iter("nil"))
        val con = con-parse(tks)
        assert(con === nil)
    }
    do {
        val tks = tks-init(to.iter("false"))
        val con = con-parse(tks)
        assert(con === false)
    }
    do {
        val tks = tks-init(to.iter("true"))
        val con = con-parse(tks)
        assert(con === true)
    }
    do {
        val tks = tks-init(to.iter("'a'"))
        val con = con-parse(tks)
        assert(con === 'a')
    }
    do {
        val tks = tks-init(to.iter("'\\n'"))
        val con = con-parse(tks)
        assert(con === '\n')
    }
    catch {
        val tks = tks-init(to.iter("1"))
        tks->error-read("[")
    } thus {
        assert(it === tag(:Err, "error : expected \"[\" : have \"1\""))
    }
    catch {
        val tks = tks-init(to.iter("tre"))
        con-parse(tks)
    } thus {
        assert(it === :TODO)
        ;;assert(it === :Tk.Err [[1,1],"invalid keyword"])
    }
    do {
        val tks = tks-init(to.iter("[nil,#[1,-2],'a']"))
        val con = con-parse(tks)
        assert(con === [nil,#[1,-2],'a'])
    }
    do {
        val tks = tks-init(to.iter(":X []"))
        val con = con-parse(tks)
        assert(con === :X [])
    }
    do {
        val tks = tks-init(to.iter("@[]"))
        val con = con-parse(tks)
        assert(con === @[])
    }
    do {
        val tks = tks-init(to.iter("@[(true,[]),(:x,'a')]"))
        val con = con-parse(tks)
        assert(con === @[(true,[]),(:x,'a')])
    }
    do {
        val tks = tks-init(to.iter("@[x=-10,y=20]"))
        val con = con-parse(tks)
        assert(con === @[(:x,-10),(:y,20)])
    }
    do {
        enum { :vec, :tup, :str }
        val con = con-read("x.con")
        assert(con === @[(:vec,#[1,2,3]), (:tup,[true,nil,false,'a']), (:str,"ola"), (:nil,:nil), (1,-10), (2,20)])
    }
}
