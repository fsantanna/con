data :Char = [letter?, digit?, letter-or-digit?]

val char :Char = do {
    func x-letter? (c) {
        (c is? :char) and (to.number(c) thus {
            ((it >= to.number('a')) and (it <= to.number('z'))) or
            ((it >= to.number('A')) and (it <= to.number('Z')))
        })
    }
    func x-digit? (c) {
        (c is? :char) and (to.number(c) thus {
            ((it >= to.number('0')) and (it <= to.number('9')))
        })
    }
    func x-letter-or-digit? (c) {
        x-letter?(c) or x-digit?(c)
    }
    [x-letter?, x-digit?, x-letter-or-digit?]
}

do {
    println(:CHAR)
    assert(not char.letter?(nil))
    assert(char.letter?('z'))
    assert(char.letter?('C'))
    assert(not char.letter?(' '))
    assert(not char.letter?('\n'))
    assert(char.digit?('0'))
    assert(char.digit?('5'))
    assert(not char.digit?('x'))
    assert(not char.digit?(true))
    assert(char.letter-or-digit?('9'))
    assert(char.letter-or-digit?('a'))
    assert(not char.letter-or-digit?('#'))
    assert(not char.letter-or-digit?([]))
}
