data :Tokens = [lexer :Iterator, buf :Tk]

func tks-init (itr :Iterator) {
    val lexer :Iterator = iter-lexer(itr)
    val tk = lexer->next()
    :Tokens [lexer, tk]
}

func eof? (tks :Tokens) {
    tks.buf == nil
}

func check (tks :Tokens, tg, str) {
    ifs {
        (tg is? :vector)      => tks->check(:Tk.Sym,tg) or
                                 tks->check(:Tk.Tag,tg)
        (tks.buf is-not? tg)  => nil
        (str == nil)          => tks.buf
        (tks.buf.str =/= str) => nil
        else                  => tks.buf
    }
}

func read (tks :Tokens) {
    val buf = tks.buf                  ;; TODO: error unsafe
    set tks.buf = tks.lexer.f(tks.lexer)    ;;       not sure if f is safe
    buf
}

func check-read (tks :Tokens, tg, str) {
    tks->check(tg,str) and tks->read()
}

func error-read (tks :Tokens, tg, str) {
    if not tks->check(tg,str) {
        error(tag(:Err, "error : expected \"" ++ to.string(tg) ++ "\" : have \"" ++ tks.buf.str ++ "\""))
    }
    tks->read()
}

test {
    println(:TKS)
    val tks = tks-init(to.iter("1 , ["))
    assert(tks->check(:Tk.Num)  === :Tk.Num [[1,1],"1"])
    assert(tks->read()          === :Tk.Num [[1,1],"1"])
    assert(tks->check-read(",") === :Tk.Sym [[1,3],","])
    assert(tks->check-read("?") === nil)
    assert(tks->eof?()          === false)
    assert(tks->error-read("[") === :Tk.Sym [[1,5],"["])
    assert(tks->eof?())
}
test {
    println(:TKS-ERR)
    catch {
        val tks = tks-init(to.iter("1 , ["))
        tks->error-read("[")
    } thus {
        assert(it === tag(:Err, "error : expected \"[\" : have \"1\""))
    }
}
