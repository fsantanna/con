;; composition

func {{<|<}} (f,g) {
    func (v) {
        f(g(v))
    }
}

data :Fp = [drop-first, drop-last, take-first]

val fp :Fp = do {
    func x-drop-first (vec, n) {
        val ret = #[]
        loop i in {(n or 1) => #vec{ {
            set ret[+] = vec[i]
        }
        ret
    }
    func x-drop-last (vec, n) {
        val ret = #[]
        loop i in {0 => #vec-(n or 1){ {
            set ret[i] = vec[i]
        }
        ret
    }
    func x-take-first (vec, n) {
        val ret = #[]
        loop i in {0 => (n or 1){ {
            set ret[i] = vec[i]
        }
        ret
    }
    [x-drop-first, x-drop-last, x-take-first]
}

do {
    assert(fp.drop-first(#[1,2,3],2) === #[3])
    assert(fp.drop-first(#[1]) === #[])
    assert(fp.drop-first(#[],5) === #[])
    assert(fp.drop-last(#[1,2,3],2) === #[1])
    assert(fp.drop-last(#[1]) === #[])
    assert(fp.drop-last(#[],5) === #[])
    assert(fp.take-first(#[1]) === #[1])
    assert(fp.take-first(#[1,2,3],2) === #[1,2])
    ;;assert(take-first(#[]) === #[])         ;; TODO: out of bounds
}
