func iter-file (f-name, tp) {
    val ^f-hand = `:pointer fopen($f-name.Dyn->Ncast.Vector.buf, "r")`
    coro () {
        val f = ^^f-hand
        defer {
            `fclose($f.Pointer);`
        }
        loop {
            val b = `:number fgetc($f.Pointer)`
        } until (b == `:number EOF`) {
            yield(to-char(b))
        }
    } thus {
        iter(it)
    }
}

do {
    println(:ITER-FILE)
    val itr :Iterator = iter-file("x.ceu")
    assert(itr.f(itr) == '1')
    assert(itr.f(itr) == ' ')
    assert(itr.f(itr) == '2')
    assert(itr.f(itr) == ' ')
    assert(itr.f(itr) == ';')
    assert(itr.f(itr) == ';')
    assert(itr.f(itr) == ' ')
    assert(itr.f(itr) == '9')
    assert(itr.f(itr) == '\n')
    ;;assert(false)
}

^["char.ceu"]
^["buffer.ceu"]
^["lexer.ceu"]
^["tokens.ceu"]

;;-----------------------------------------------------------------------------

data :Con = [tk] {
    :Num   = []
    :Tuple = []
}

func con-parse (tks :Tokens) {
    ifs {
        tk = tks-read-chk(tks, :Tk.Num) -> :Con.Num tk
        tk = tks-read-chk(tks, "[") {
            tks-read-err(tks, "]")
            :Con.Tuple tk
        }
    }
}

do {
    println(:CON)
    do {
        val tks = tks-init(iter("1"))
        val con = con-parse(tks)
        assert(con === :Con.Num [[1,1],"1"])
    }
    do {
        val tks = tks-init(iter("[]"))
        val con = con-parse(tks)
        assert(con === :Con.Sym [[1,1],"["])
    }
}
