func iter-file (f-name, tp) {
    val ^f-hand = `:pointer fopen($f-name.Dyn->Ncast.Vector.buf, "r")`
    iter <-- coro () {
        val f = ^^f-hand
        defer {
            `fclose($f.Pointer);`
        }
        loop {
            val b = `:number fgetc($f.Pointer)`
        } until (b == `:number EOF`) {
            yield(to-char(b))
        }
    }
}

do {
    println(:ITER-FILE)
    val itr :Iterator = iter-file("x.ceu")
    assert(itr->next() == '1')
    assert(itr->next() == ' ')
    assert(itr->next() == '2')
    assert(itr->next() == ' ')
    assert(itr->next() == ';')
    assert(itr->next() == ';')
    assert(itr->next() == ' ')
    assert(itr->next() == '9')
    assert(itr->next() == '\n')
    ;;assert(false)
}

^["char.ceu"]
^["buffer.ceu"]
^["lexer.ceu"]
^["tokens.ceu"]

;;-----------------------------------------------------------------------------

var con-parse

func con-list0 (tks :Tokens, sep, clo) {
    var vec = #[]
    loop until tks->read-chk(clo) {
        set vec[#vec] = [con-parse(tks)]
    } until tks->read-chk(clo) {
    } while tks->read-err(sep)

    val tup = tuple(#vec)
    loop v in iter(vec,:all) {
        set tup[v.0] = move(v[1].0)
    }
    move(tup)
}

set con-parse = func (tks :Tokens) {
    ifs {
        tk = tks->read-chk(:Tk.Num) => to-number(tk.(:Tk).str)
        tk = tks->read-chk(:Tk.Tag) => to-tag(tk.(:Tk).str)
        tks->read-chk("[")          => con-list0(tks, ",", "]")
        tks->read-chk("#") and
            tks->read-err("[")      => to-vector(con-list0(tks, ",", "]"))
    }
}

do {
    println(:CON)
    do {
        val tks = tks-init(iter("1"))
        val con = con-parse(tks)
        assert(con == 1)
    }
    do {
        val tks = tks-init(iter(":x"))
        val con = con-parse(tks)
        assert(con == :x)
        assert(to-string(con) === ":x")
    }
    do {
        val tks = tks-init(iter(":asdf"))
        val con = con-parse(tks)
        assert(con == nil)
    }
    do {
        val tks = tks-init(iter("[]"))
        val con = con-parse(tks)
        assert(con === [])
    }
    do {
        val tks = tks-init(iter("[1,2]"))
        val con = con-parse(tks)
        assert(con === [1,2])
    }
    do {
        val tks = tks-init(iter("[1,[9],2]"))
        val con = con-parse(tks)
        assert(con === [1,[9],2])
    }
    do {
        val tks = tks-init(iter("#[[1]]"))
        val con = con-parse(tks)
        assert(con === #[[1]])
    }
}
